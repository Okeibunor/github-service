openapi: 3.0.0
info:
  title: GitHub Repository Service API
  description: API for monitoring GitHub repositories, fetching commit data, and providing analytics. The service continuously syncs with GitHub's public APIs to maintain up-to-date repository information in a persistent store.
  version: 1.0.0
  contact:
    name: API Support
    url: https://github.com/okeibunor/github-service

servers:
  - url: http://localhost:8080
    description: Local development server

paths:
  /health:
    get:
      summary: Service Health Check
      description: Basic endpoint to check if the service is running
      responses:
        "200":
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "Service is healthy"
                  data:
                    type: object
                    properties:
                      status:
                        type: string
                        example: "ok"

  /api/v1/repositories:
    get:
      summary: List Repositories
      description: Get a list of all monitored repositories with their details
      responses:
        "200":
          description: List of repositories
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "Repositories retrieved successfully"
                  data:
                    type: object
                    properties:
                      count:
                        type: integer
                        description: Total number of repositories
                      repositories:
                        type: array
                        items:
                          $ref: "#/components/schemas/Repository"

  /api/v1/repositories/{owner}/{repo}:
    parameters:
      - name: owner
        in: path
        required: true
        schema:
          type: string
        description: GitHub repository owner
      - name: repo
        in: path
        required: true
        schema:
          type: string
        description: GitHub repository name
    put:
      summary: Add Repository
      description: Add a new repository to monitor and schedule initial sync
      responses:
        "202":
          description: Repository scheduled for synchronization
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "Repository owner/repo scheduled for synchronization"
                  data:
                    type: object
                    properties:
                      job_id:
                        type: string
                      status:
                        type: string
                        example: "scheduled"
                      owner:
                        type: string
                      repo:
                        type: string
        "404":
          description: Repository not found on GitHub
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "429":
          description: GitHub API rate limit exceeded
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
    delete:
      summary: Remove Repository
      description: Stop tracking a repository and remove its data
      responses:
        "200":
          description: Repository removed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "Repository owner/repo removed successfully"
                  data:
                    type: object
                    properties:
                      owner:
                        type: string
                      repo:
                        type: string

  /api/v1/repositories/{owner}/{repo}/commits:
    get:
      summary: Get Repository Commits
      description: Get paginated commits for a specific repository
      parameters:
        - name: owner
          in: path
          required: true
          schema:
            type: string
          description: GitHub repository owner
        - name: repo
          in: path
          required: true
          schema:
            type: string
          description: GitHub repository name
        - name: page
          in: query
          description: Page number (1-based)
          required: false
          schema:
            type: integer
            default: 1
            minimum: 1
        - name: per_page
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            default: 10
            minimum: 1
      responses:
        "200":
          description: List of commits
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "Commits retrieved successfully"
                  data:
                    type: object
                    properties:
                      commits:
                        type: array
                        items:
                          $ref: "#/components/schemas/Commit"
                      page:
                        type: integer
                      per_page:
                        type: integer
                      total_items:
                        type: integer

  /api/v1/repositories/{owner}/{repo}/resync:
    post:
      summary: Resync Repository
      description: Manually trigger a repository resynchronization
      parameters:
        - name: owner
          in: path
          required: true
          schema:
            type: string
          description: GitHub repository owner
        - name: repo
          in: path
          required: true
          schema:
            type: string
          description: GitHub repository name
      responses:
        "202":
          description: Repository resync scheduled
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "Repository owner/repo scheduled for resynchronization"
                  data:
                    type: object
                    properties:
                      job_id:
                        type: string
                      status:
                        type: string
                        example: "scheduled"
                      owner:
                        type: string
                      repo:
                        type: string
        "404":
          description: Repository not being monitored
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/v1/stats/top-authors:
    get:
      summary: Get Top Commit Authors
      description: Get the most active commit authors globally or for a specific repository
      parameters:
        - name: limit
          in: query
          description: Number of authors to return
          required: false
          schema:
            type: integer
            default: 10
            minimum: 1
        - name: repository
          in: query
          description: Full repository name (owner/repo) to get stats for
          required: false
          schema:
            type: string
      responses:
        "200":
          description: List of top authors
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "Top authors retrieved successfully"
                  data:
                    type: object
                    properties:
                      authors:
                        type: array
                        items:
                          $ref: "#/components/schemas/CommitStats"
                      n:
                        type: integer
                        description: Number of authors returned
                      repository:
                        type: string
                        description: Repository name if specified, empty for global stats
        "404":
          description: Repository not found or not being monitored
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/v1/jobs:
    get:
      summary: List Jobs
      description: Get a list of all jobs in the queue
      responses:
        "200":
          description: List of jobs
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "Jobs retrieved successfully"
                  data:
                    type: object
                    properties:
                      jobs:
                        type: array
                        items:
                          $ref: "#/components/schemas/Job"
                      count:
                        type: integer

  /api/v1/jobs/{job_id}:
    get:
      summary: Get Job Status
      description: Get the status of a specific job
      parameters:
        - name: job_id
          in: path
          required: true
          schema:
            type: string
          description: Job ID
      responses:
        "200":
          description: Job status
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "Job status retrieved successfully"
                  data:
                    type: object
                    properties:
                      job_id:
                        type: string
                      status:
                        type: string
        "404":
          description: Job not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

components:
  schemas:
    Repository:
      type: object
      properties:
        id:
          type: integer
          format: int64
        github_id:
          type: integer
          format: int64
        name:
          type: string
        full_name:
          type: string
        description:
          type: string
          nullable: true
        url:
          type: string
        language:
          type: string
          nullable: true
        forks_count:
          type: integer
        stars_count:
          type: integer
        open_issues_count:
          type: integer
        watchers_count:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        last_commit_check:
          type: string
          format: date-time
          nullable: true
        commits_since:
          type: string
          format: date-time
          nullable: true

    Commit:
      type: object
      properties:
        id:
          type: integer
          format: int64
        repository_id:
          type: integer
          format: int64
        sha:
          type: string
        message:
          type: string
        author_name:
          type: string
        author_email:
          type: string
        author_date:
          type: string
          format: date-time
        committer_name:
          type: string
        committer_email:
          type: string
        commit_date:
          type: string
          format: date-time
        url:
          type: string

    CommitStats:
      type: object
      properties:
        author_name:
          type: string
        author_email:
          type: string
        commit_count:
          type: integer

    Job:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
          enum: [sync, resync]
        status:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        payload:
          type: object

    SuccessResponse:
      type: object
      properties:
        status:
          type: string
          example: "success"
        message:
          type: string
        data:
          type: object

    ErrorResponse:
      type: object
      properties:
        status:
          type: string
          example: "error"
        message:
          type: string
